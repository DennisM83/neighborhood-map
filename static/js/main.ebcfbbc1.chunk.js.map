{"version":3,"sources":["ErrorBound.js","Map.js","FourAPI.js","ToggleButton.js","TopNav.js","VenueList.js","TheList.js","SideMenu.js","App.js","serviceWorker.js","index.js"],"names":["Error","state","hasAnError","error","info","alert","this","setState","react_default","a","createElement","props","children","Component","MyMapComponent","withScriptjs","withGoogleMap","lib","defaultZoom","defaultCenter","lat","lng","defaultAnimation","markers","filter","marker","isVisible","map","index","venueInfo","venues","find","venue","id","key","position","animation","isOpen","onClick","markerClick","name","location","address","Map","window","gm_authFailure","ErrorBound","Object","assign","isMarkerShown","googleMapURL","loadingElement","style","height","containerElement","mapElement","role","Helper","keys","client_id","client_secret","v","concat","join","urlPrams","Accept","endPoint","method","requestData","headers","fetch","baseURL","auth","urlBuilder","then","res","json","catch","SquareAPI","simpleFetch","VENUE_ID","ToggleBtn","type","className","toggle","aria-pressed","TopNav","tabIndex","ToggleButton","VenueList","sideBarClick","TheList","element","src_VenueList","SideMenu","query","restaurants","filterTheVenues","_this","trim","toLowerCase","includes","reviseQuery","event","target","value","doesMatch","updateToTheState","openMenu","placeholder","onChange","aria-label","src_TheList","App","markerClose","getVenueDetails","fresh","response","_this2","search","ll","limit","theVenues","src_TopNav","src_SideMenu","src_Map","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ebcfbbc1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Style.css'\n\nclass Error extends Component {\n\n    state = {\n        hasAnError: false\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasAnError: true}\n    }\n\n    componentDidCatch(error, info) {\n        alert('Oops! looks like something went wrong loading the map!' + error)\n    }\n    render() {\n        if (this.setState.hasAnError) {\n            return <h2>Oops!</h2>\n        } \n        return this.props.children\n    }\n}\n\nexport default Error;","import React, { Component } from 'react'\nimport './Style.css'\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\"\nimport Error from './ErrorBound.js';\n\n/*From Tom Chen @ https://tomchentw.github.io/react-google-maps/ */\nconst MyMapComponent = withScriptjs(withGoogleMap((props) =>\n        <GoogleMap \n            defaultZoom = { 10 }\n            defaultCenter = {\n            {   lat: 28.688239, lng: -81.399993 }}\n            defaultAnimation = {2}\n            \n        >\n        { /*written by Forrest Walker - https://www.youtube.com/watch?v=cJ3sAG2Ybq4&index=4&list=PL4rQq4MQP1crXuPtruu_eijgOUUXhcUCP */}\n        {props.markers && props.markers.filter(marker => marker.isVisible).map((marker, index) => {\n            /* compares the ids between the venue and the current marker */\n            let venueInfo =  props.venues.find(venue => venue.id === marker.id)\n            /* renders markers dynamically */\n           return <Marker key = {\n               index\n           }\n           position = {\n               {\n                   lat: marker.lat,\n                   lng: marker.lng\n               }\n           }\n           animation = {\n               marker.isOpen === true ? 1 : 2\n           }\n           onClick = {\n               () => props.markerClick(marker)\n           } >\n                {marker.isOpen && (\n                    /* the info window to display the name of the establishment and the address */\n                <InfoWindow>\n                    <div>\n                        <p>{venueInfo.name}</p>\n                        <p>{venueInfo.location.address}</p>\n                        <p id=\"fourInfo\">info provided by <span id=\"fourTitle\">Foursquare</span></p>\n                    </div>\n                </InfoWindow>)}\n            </Marker>\n        })\n        }\n        </GoogleMap>\n))\n\nclass Map extends Component {\n\n    componentDidUpdate() {\n        /* error handler for the map in case of failure*/\n        window.gm_authFailure = () => {\n            alert('Oops! looks like something went wrong loading the map')\n        };\n    }\n\n    render() {\n        return(\n            <Error {...this.props}>\n                <MyMapComponent\n                /* spread operator for the array props */\n                    {...this.props}\n                    isMarkerShown\n                /* the url to render GOOGLE MAPS */\n                    googleMapURL =  \"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyAbs0suPVRKY8V7nXTVVjoWeVZYJjxqQNU\"\n                    loadingElement = { <div style = {{ height: `100%` }}/>}\n                    containerElement = { <div style = {{ height: `400px` }}/>}\n                /* sets the relative total height of the window */\n                    mapElement = {<div style = {{ height: `100vh` }}/>}\n                    role=\"application\" \n                />\n            </Error>\n        )\n    }\n}\n\nexport default Map;","/* written by Forrest Walker - https://www.youtube.com/watch?v=Dj5hzKBxCBI&list=PL4rQq4MQP1crXuPtruu_eijgOUUXhcUCP&index=3 */\n/* Using Foursquare API https://developer.foursquare.com/ */\nclass Helper {\n    static baseURL() {\n        /*this establishes the base address for Foursquare*/\n        return \"https://api.foursquare.com/v2\";\n    }\n    static auth() {\n        /*authentication for our Foursquare API request*/\n        const keys = {\n            client_id: \"DE1DKNEUOSEUI2FOQT2MFCSGQYSWR2VCCK5BXXLBIWVRYAFR\",\n            client_secret: \"ON5Y30V0RI0PCHPYOZJAFGY4YVP4SVYRKGDYIOY20PX1AOTD\",\n            v:\"20181017\"\n        };\n        /*turn the keys object into a string for the request*/\n        return Object.keys(keys)\n            .map(key => `${key}=${keys[key]}`)\n            .join(\"&\");\n    }\n    static urlBuilder(urlPrams) {\n        if(!urlPrams) {\n            return \"\"\n        }\n        return Object.keys(urlPrams)\n            .map(key => `${key}=${urlPrams[key]}`)\n            .join(\"&\");\n    }\n    /*setting the headers for the client / server request / response */\n    static headers() {\n        return {\n            Accept: \"application/json\"\n        };\n    }\n    /* making our fetch request */\n    static simpleFetch(endPoint, method, urlPrams) {\n        let requestData = {\n            method,\n            /* this is establised because this is a static function */\n            headers: Helper.headers()\n        };\n        return fetch(`${Helper.baseURL()}${endPoint}?${Helper.auth()}&${Helper.urlBuilder(\n            urlPrams\n        )}`,\n        requestData\n        ).then(res => res.json()).catch(() => alert('Oops! looks like something went wrong finding locations'))\n    }\n}\nexport default class SquareAPI {\n    /* establishing our 'Search' endpoint */\n    static search(urlPrams) {\n        return Helper.simpleFetch(\"/venues/search\",\"GET\",urlPrams);\n    }\n    /* establishing our 'venue detail' endpoint */\n    static getVenueDetails(VENUE_ID) {\n        return Helper.simpleFetch(`/venues/${VENUE_ID}`,\"GET\")\n    }\n}","import React from 'react'\n\nconst ToggleBtn = (props) => {\n    return (\n        <button type=\"button\" className=\"btn btn-secondary col-xs-2\" onClick={props.toggle} aria-pressed=\"false\">\n            <span>X</span>\n        </button>\n    )\n}\n\nexport default ToggleBtn;","import React from 'react'\nimport ToggleBtn from './ToggleButton.js'\n\nconst TopNav = (props) => {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expanded-lg navbar-dark bg-dark\" id=\"topbar\">\n                <div className=\"text-center container-fluid\">\n                    Neighborhood Map\n                    <div className=\"col-xs-2\" tabIndex=\"0\">\n                        <ToggleBtn toggle={props.toggle}/>\n                    </div>\n                </div>\n            </nav>\n        </div>\n    )\n}\n\nexport default TopNav;","import React from 'react' \n\nconst VenueList = (props) => {\n    return (\n        <li tabIndex=\"1\" onClick={() => props.sideBarClick(props)}>{props.name}</li>\n    )\n}\n\nexport default VenueList;","import React from 'react'\nimport VenueList from './VenueList'\n\nconst TheList = (props) => {\n    return (\n        <ul className=\"list-unstyled\"> \n        { /* dynamically renders the list-items based on the venue ID and name */ } \n            {props.venues && props.venues.map((element, index) => ( \n                    <VenueList \n                    key = {index} \n                    {...element}\n                    sideBarClick={props.sideBarClick}\n                    /> \n                ))}\n        </ul>\n    )\n}\n\nexport default TheList;","import React, { Component } from 'react';\nimport './Style.css';\nimport TheList from './TheList.js'\n\nclass SideMenu extends Component {\n    /* this sets the query for the filter */\n    state = {\n        query: '',\n        restaurants: []\n    }\n\n/* filters through the list of restaurants and returns the names on the side menu */\n    filterTheVenues = () => {\n        if(this.state.query.trim() !== \"\") {\n            let restaurants = this.props.venues.filter(venue => venue.name.toLowerCase().includes(this.state.query.toLowerCase()))\n            return restaurants\n        }\n        return this.props.venues\n    }\n\n    /*this updates the query when the user enters in a character */\n    reviseQuery = (event) => {\n        this.setState({\n            query: event.target.value\n        })\n        \n        let markers = this.props.venues.map(venue => {\n            let doesMatch = venue.name.toLowerCase().includes(event.target.value.toLowerCase())\n            let marker = this.props.markers.find(element => element.id === venue.id);\n            if(doesMatch) {\n                marker.isVisible = true;\n            } else {\n                marker.isVisible = false;\n            }\n            return marker;\n        });\n        this.props.updateToTheState({markers})\n    }\n\n    render() {\n        return (\n            <div className=\"sideMenu\" role=\"listitem\" tabIndex=\"1\">\n            {/* checks the toggle open and close */}\n                {this.props.openMenu &&\n                    <nav className=\"navbar navbar-dark bg-dark\" id=\"navMenu\">\n                        <span className=\"navbar-span\" id=\"navbar-span\">\n                        Local Eats\n                        {/* the filter for the list items */}\n                        <form className=\"form-inline align-items-center col-auto\">\n                            <input className=\"form-control mr-sm-1\" type=\"search\" placeholder=\"Filter Restaurants\" value={this.state.query} onChange={this.reviseQuery} aria-label=\"filter\"/>\n                            <TheList \n                                {...this.props}\n                                venues={this.filterTheVenues()}\n                                sideBarClick={this.props.sideBarClick}\n                            />\n                        </form>\n                        </span>\n                    </nav>\n                }\n            </div>\n        )\n    }\n}\n\nexport default SideMenu;","import React, { Component } from 'react';\nimport Map from './Map.js'\nimport './App.css';\nimport './Style.css'\nimport SquareAPI from './FourAPI.js';\nimport TopNav from './TopNav.js'\nimport SideMenu from './SideMenu.js';\n\nclass App extends Component {\n\n  state = {\n    venues: [],\n    markers: [],\n    openMenu: true,\n    updateToTheState: element => {\n      this.setState(element)\n    }\n  }\n\n  /* open and closes the side menu */\n  toggle = () => {\n    this.setState(state =>({\n      openMenu: !state.openMenu\n    }))\n  }\n\n  markerClose = () => {\n    let markers = this.state.markers.map(marker => {\n      marker.isOpen = false;\n      return marker;\n    })\n    this.setState({ markers: Object.assign(this.state.markers, markers )})\n  }\n\n/*handles the infowindow when marker is clicked on map */\n  markerClick = (marker) => {\n    this.markerClose()\n    marker.isOpen = true;\n    this.setState({\n      markers: Object.assign(this.state.markers, marker)\n    });\n    let venue = this.state.venues.find(venue => venue.id === marker.id)\n    SquareAPI.getVenueDetails(marker.id).then(res => {\n      let fresh = Object.assign(venue, res.response.venue)\n      this.setState({ venues: Object.assign(this.state.venues, fresh )})\n    })\n  }\n\n/* allows the list items on the sidebar menu to correspond to the markers on the map */\n  sideBarClick = venue => {\n    let marker = this.state.markers.find(element => element.id === venue.id);\n    this.markerClick(marker)\n}\n  \n/* searches the FoursquareAPI and returns the information from the server */\n  componentDidMount() {\n    SquareAPI.search({\n      ll: \"28.688239,-81.399993\",\n      query: \"restaurant\",\n      limit: 10\n    }).then(theVenues => {\n      let { venues } = theVenues.response;\n      let markers = venues.map(venue => {\n        return {\n          lat: venue.location.lat,\n          lng: venue.location.lng,\n          isOpen: false,\n          isVisible: true,\n          id: venue.id\n        }\n      });\n      this.setState({ venues, markers })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TopNav toggle={this.toggle}/>\n        <SideMenu openMenu={this.state.openMenu} {...this.state} sideBarClick={this.sideBarClick}/>\n        <Map {...this.state} markerClick={this.markerClick}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}